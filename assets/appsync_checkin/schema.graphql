schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type CheckInStatus {
  user_id: Int!
  group_id: Int!
  latitude: Float
  longitude: Float
  accuracy: Float
  altitude: Float
  heading: Float
  speed: Float
  timestamp: AWSTimestamp
  expires_at: AWSTimestamp
  status: String
}

type CheckInStatusConnection {
  items: [CheckInStatus]
  nextToken: String
}

input CreateCheckInStatusInput {
  user_id: Int!
  group_id: Int!
  latitude: Float
  longitude: Float
  accuracy: Float
  altitude: Float
  heading: Float
  speed: Float
  timestamp: AWSTimestamp
  expires_at: AWSTimestamp
  status: String
}

input DeleteCheckInStatusInput {
  user_id: Int!
  group_id: Int!
}

type Mutation {
  createCheckInStatus(input: CreateCheckInStatusInput!): CheckInStatus
  updateCheckInStatus(input: UpdateCheckInStatusInput!): CheckInStatus
  deleteCheckInStatus(input: DeleteCheckInStatusInput!): CheckInStatus
}

type Query {
  getCheckInStatus(user_id: Int!): CheckInStatus
  listCheckInStatus(filter: TableCheckInStatusFilterInput, limit: Int, nextToken: String): CheckInStatusConnection
}

type Subscription {
  onCreateCheckInStatus(user_id: Int, group_id: Int, latitude: Float, longitude: Float, accuracy: Float): CheckInStatus
  @aws_subscribe(mutations: ["createCheckInStatus"])
  onUpdateCheckInStatus(user_id: Int, group_id: Int, latitude: Float, longitude: Float, accuracy: Float): CheckInStatus
  @aws_subscribe(mutations: ["updateCheckInStatus"])
  onDeleteCheckInStatus(user_id: Int, group_id: Int, latitude: Float, longitude: Float, accuracy: Float): CheckInStatus
  @aws_subscribe(mutations: ["deleteCheckInStatus"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableCheckInStatusFilterInput {
  user_id: TableIntFilterInput
  group_id: TableIntFilterInput
  latitude: TableFloatFilterInput
  longitude: TableFloatFilterInput
  accuracy: TableFloatFilterInput
  altitude: TableFloatFilterInput
  heading: TableFloatFilterInput
  speed: TableFloatFilterInput
  timestamp: TableIntFilterInput
  expires_at: TableIntFilterInput
  status: TableStringFilterInput
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input UpdateCheckInStatusInput {
  user_id: Int!
  group_id: Int
  latitude: Float
  longitude: Float
  accuracy: Float
  altitude: Float
  heading: Float
  speed: Float
  timestamp: AWSTimestamp
  expires_at: AWSTimestamp
  status: String
}