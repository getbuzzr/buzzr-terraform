schema @aws_api_key @aws_iam {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type CheckinStatus @aws_iam {
  checkin_type: CheckinType!
  date_created: AWSDateTime!
  group_id: Int!
  latitude: Float!
  longitude: Float!
  ttl: Int!
  user_id: Int!
}

type Query {
  getCheckinStatus(group_id: Int!, user_id: Int!): CheckinStatus
  getCheckinStatusesForGroup(group_id: Int!): [CheckinStatus]
}

type Mutation @aws_iam {
  createCheckinStatus(input: CreateCheckinStatusInput!): CheckinStatus
  updateCheckinStatus(input: UpdateCheckinStatusInput!): CheckinStatus
  deleteCheckinStatus(input: DeleteCheckInStatusInput!): CheckinStatus
}

type Subscription {
  onCreateCheckinStatus(
    group_id: Int
    latitude: Float
    longitude: Float
    user_id: Int
  ): CheckinStatus @aws_subscribe(mutations: ["createCheckinStatus"])
  onDeleteCheckinStatus(
    group_id: Int
    latitude: Float
    longitude: Float
    user_id: Int
  ): CheckinStatus @aws_subscribe(mutations: ["deleteCheckinStatus"])
  onUpdateCheckinStatus(
    group_id: Int
    latitude: Float
    longitude: Float
    user_id: Int
  ): CheckinStatus @aws_subscribe(mutations: ["updateCheckinStatus"])
}

enum CheckinType {
  emergency
  life_check
  off
  safe
}

input CreateCheckinStatusInput {
  checkin_type: CheckinType!
  date_created: AWSDateTime!
  group_id: Int!
  latitude: Float!
  longitude: Float!
  ttl: Int!
  user_id: Int!
}

input UpdateCheckinStatusInput {
  user_id: Int!
  group_id: Int!
  checkin_type: CheckinType
  date_created: AWSDateTime
  latitude: Float
  longitude: Float
  ttl: Int
}

input DeleteCheckInStatusInput {
  user_id: Int!
  group_id: Int!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableCheckInStatusFilterInput {
  checkin_type: TableStringFilterInput
  date_created: TableIntFilterInput
  group_id: TableIntFilterInput
  latitude: TableFloatFilterInput
  longitude: TableFloatFilterInput
  ttl: TableIntFilterInput
  user_id: TableIntFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}
