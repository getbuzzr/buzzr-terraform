# workflow only runs on push
name: Terraform apply
# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]
    paths:
      - "root/**"
      - "dev/**"
      - "prod/**"
      - "staging/**"
      - "modules/**"
      - "assets/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # terraform apply job
  apply:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_AWS_SECRET }}
    steps:
      # Checks-out repo
      - uses: actions/checkout@v2

      # install terraform
      - uses: hashicorp/setup-terraform@v1

      # get path changed
      - uses: dorny/paths-filter@v2
        id: edited_files
        with:
          filters: |
            root:
              - 'root/**'
            dev:
              - 'dev/**'
            staging:
              - 'staging/**'
            prod:
              - 'prod/**'
            common:
              - 'modules/**'
              - 'assets/**'

      # install aws with configure on env vars
      - name: Configure AWS root
        if: steps.edited_files.outputs.root == 'true' || steps.edited_files.outputs.common == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-session-name: terraform-root
          aws-region: us-east-1
          role-duration-seconds: 1200

      # check if root edited
      - name: Terraform apply root global
        if: steps.edited_files.outputs.root == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd root/global
          terraform init
          terraform plan
          terraform apply -auto-approve

      # install aws with configure on env vars
      - name: Configure AWS Dev
        if: steps.edited_files.outputs.dev == 'true' || steps.edited_files.outputs.common == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-to-assume: arn:aws:iam::824611589741:role/dev_admin
          role-session-name: terraform-dev
          aws-region: us-east-1
          role-duration-seconds: 1200

      # check if dev edited
      - name: Terraform apply dev us-east-1
        if: steps.edited_files.outputs.dev == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd dev/us-east-1
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Terraform apply dev global
        if: steps.edited_files.outputs.dev == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd dev/global
          terraform init
          terraform plan
          terraform apply -auto-approve

      # install aws with configure on env vars
      - name: Configure AWS Staging
        if: steps.edited_files.outputs.staging == 'true' || steps.edited_files.outputs.common == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-to-assume: arn:aws:iam::096377267832:role/stage_admin
          role-session-name: terraform-staging
          aws-region: us-east-1
          role-duration-seconds: 1200

      # check if staging edited
      - name: Terraform apply staging us-east-1
        if: steps.edited_files.outputs.staging == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd staging/us-east-1
          terraform init 
          terraform plan
          terraform apply -auto-approve

      - name: Terraform apply staging global
        if: steps.edited_files.outputs.staging == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd staging/global
          terraform init 
          terraform plan
          terraform apply -auto-approve

      # install aws with configure on env vars
      - name: Configure AWS Prod
        if: steps.edited_files.outputs.prod == 'true' || steps.edited_files.outputs.common == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-to-assume: arn:aws:iam::980636768267:role/prod_admin
          role-session-name: terraform-prod
          aws-region: us-east-1
          role-duration-seconds: 1200

      # check if prod edited
      - name: Terraform apply prod us-east-1
        if: steps.edited_files.outputs.prod == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd prod/us-east-1
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Terraform apply prod global
        if: steps.edited_files.outputs.prod == 'true' || steps.edited_files.outputs.common == 'true'
        run: |
          cd prod/global
          terraform init
          terraform plan
          terraform apply -auto-approve
