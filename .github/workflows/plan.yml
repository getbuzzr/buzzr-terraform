# workflow only runs on pull request
name: Terraform plan
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  pull_request:
    branches: [ master ]
    paths:
      - 'dev/**'
      - 'prod/**'
      - 'staging/**'
      - 'root/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # terraform plan job
  plan:
    runs-on: ubuntu-latest
    steps:
      # Checks-out repo
      - uses: actions/checkout@v2
      
      # install terraform
      - uses: hashicorp/setup-terraform@v1
      
      # get path changed
      - uses: dorny/paths-filter@v2
        id: edited_files
        with:
          filters: |
            dev:  
              - 'dev/**'
            staging:
              - 'staging/**'
            prod:
              - 'prod/**'
            root:
              - 'root/**'
      
      # install aws with configure on env vars
      - name: Configure AWS Dev
        if: steps.edited_files.outputs.dev == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-to-assume: arn:aws:iam::073157105290:role/dev_admin
          role-session-name: terraform-dev
          aws-region: us-east-1
          role-duration-seconds: 1200

      # check if dev edited
      - name: Terraform plan dev us-east-1
        if: steps.edited_files.outputs.dev == 'true'
        run: |
          cd dev/us-east-1
          terraform init
          terraform plan

      
    # install aws with configure on env vars
      - name: Configure AWS Staging
        if: steps.edited_files.outputs.staging == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-to-assume: arn:aws:iam::732983264044:role/staging_admin
          role-session-name: terraform-staging
          aws-region: us-east-1
          role-duration-seconds: 1200

    # check if staging edited
      - name: Terraform plan staging us-east-1
        if: steps.edited_files.outputs.staging == 'true'
        run: |
          cd staging/us-east-1
          terraform init 
          terraform plan
    
    # install aws with configure on env vars
      - name: Configure AWS Prod
        if: steps.edited_files.outputs.prod == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-to-assume: arn:aws:iam::995213493585:role/prod_admin
          role-session-name: terraform-prod
          aws-region: us-east-1
          role-duration-seconds: 1200
    
    # check if prod edited
      - name: Terraform plan prod us-east-1
        if: steps.edited_files.outputs.prod == 'true'
        run: |
          cd prod/us-east-1
          terraform init
          terraform plan
    
    # install aws with configure on env vars
      - name: Configure AWS Root
        if: steps.edited_files.outputs.root == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_AWS_SECRET }}
          role-session-name: terraform-root
          aws-region: us-east-1
          role-duration-seconds: 1200
    
    # check if root edited
      - name: Terraform plan root
        if: steps.edited_files.outputs.root == 'true'
        run: |
          cd root/global
          terraform init
          terraform plan
